# Kubernetes deployment configuration for pg-neo-graph-rl
apiVersion: v1
kind: Namespace
metadata:
  name: pg-neo-graph-rl
  labels:
    app: pg-neo-graph-rl
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: pg-neo-graph-rl
data:
  LOG_LEVEL: "info"
  MONITORING_ENABLED: "true"
  SECURITY_ENABLED: "true"
  REDIS_URL: "redis://redis-service:6379"
  POSTGRES_URL: "postgresql://postgres:secure_password@postgres-service:5432/pg_neo_graph_rl"
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: pg-neo-graph-rl
type: Opaque
data:
  postgres-password: c2VjdXJlX3Bhc3N3b3JkX2NoYW5nZV9pbl9wcm9kdWN0aW9u  # base64 encoded
  redis-password: ""
---
# Main application deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pg-neo-graph-rl
  namespace: pg-neo-graph-rl
  labels:
    app: pg-neo-graph-rl
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: pg-neo-graph-rl
  template:
    metadata:
      labels:
        app: pg-neo-graph-rl
        version: v1
    spec:
      serviceAccountName: pg-neo-graph-rl
      containers:
      - name: pg-neo-graph-rl
        image: pg-neo-graph-rl:latest
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 8090
          name: monitoring
        env:
        - name: ENV
          value: "production"
        - name: WORKERS
          value: "4"
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secrets
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        - name: logs-storage
          mountPath: /app/logs
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: data-pvc
      - name: logs-storage
        persistentVolumeClaim:
          claimName: logs-pvc
---
# Service for the main application
apiVersion: v1
kind: Service
metadata:
  name: pg-neo-graph-rl-service
  namespace: pg-neo-graph-rl
  labels:
    app: pg-neo-graph-rl
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 8080
    name: http
  - port: 8090
    targetPort: 8090
    name: monitoring
  selector:
    app: pg-neo-graph-rl
---
# Redis deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: pg-neo-graph-rl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server", "--appendonly", "yes", "--maxmemory", "1gb", "--maxmemory-policy", "allkeys-lru"]
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: pg-neo-graph-rl
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
---
# PostgreSQL deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: pg-neo-graph-rl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "pg_neo_graph_rl"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: postgres-password
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: pg-neo-graph-rl
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgres
---
# Persistent Volume Claims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-pvc
  namespace: pg-neo-graph-rl
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: logs-pvc
  namespace: pg-neo-graph-rl
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: pg-neo-graph-rl
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: pg-neo-graph-rl
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# ServiceAccount for the application
apiVersion: v1
kind: ServiceAccount
metadata:
  name: pg-neo-graph-rl
  namespace: pg-neo-graph-rl
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: pg-neo-graph-rl-hpa
  namespace: pg-neo-graph-rl
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: pg-neo-graph-rl
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: pg-neo-graph-rl-netpol
  namespace: pg-neo-graph-rl
spec:
  podSelector:
    matchLabels:
      app: pg-neo-graph-rl
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432