name: CD (Continuous Deployment)

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-images:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.image.outputs.digest }}
      image-url: ${{ steps.image.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push production image
        id: image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build and push GPU image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: gpu  
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:gpu-${{ github.ref_name }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    environment:
      name: pypi
      url: https://pypi.org/p/pg-neo-graph-rl
    permissions:
      id-token: write  # For trusted publishing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          # Use trusted publishing instead of API tokens
          repository-url: https://upload.pypi.org/legacy/

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-images, publish-pypi]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Extract changelog for this version
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Get changelog content between this tag and previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREV_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s")
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.changelog.outputs.version }}
          body: |
            ## Changes in ${{ steps.changelog.outputs.version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Images
            - Production: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.changelog.outputs.version }}`
            - GPU: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:gpu-${{ steps.changelog.outputs.version }}`
            
            ## PyPI Package
            ```bash
            pip install pg-neo-graph-rl==${{ steps.changelog.outputs.version }}
            ```
            
            ## Full Changelog
            See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  # Deploy to staging environment
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    needs: [build-images]
    environment:
      name: staging
      url: https://staging.pg-neo-graph-rl.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # For example, using kubectl, helm, or docker-compose
          
          # Example with kubectl (requires cluster access)
          # kubectl set image deployment/pg-neo-graph-rl \
          #   pg-neo-graph-rl=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          #   -n staging
          
          # Example with docker-compose
          # export IMAGE_TAG=${{ github.sha }}
          # docker-compose -f docker-compose.staging.yml up -d

      - name: Health check
        run: |
          echo "Performing health check..."
          # Add health check commands
          # curl -f https://staging.pg-neo-graph-rl.example.com/health || exit 1

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands
          # pytest tests/smoke/ --url=https://staging.pg-neo-graph-rl.example.com

  # Deploy to production environment  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: |
      (startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')) ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    needs: [build-images, publish-pypi]
    environment:
      name: production
      url: https://pg-neo-graph-rl.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          
          # Example blue-green deployment
          # kubectl patch deployment pg-neo-graph-rl \
          #   -p '{"spec":{"template":{"spec":{"containers":[{"name":"pg-neo-graph-rl","image":"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"}]}}}}' \
          #   -n production

      - name: Health check
        run: |
          echo "Performing health check..."
          # Wait for deployment to be ready
          sleep 30
          # curl -f https://pg-neo-graph-rl.example.com/health || exit 1

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # pytest tests/integration/ --url=https://pg-neo-graph-rl.example.com

      - name: Update monitoring
        run: |
          echo "Updating monitoring and alerts..."
          # Update deployment version in monitoring systems
          # Send deployment notification to Slack/Teams/etc.

  # Security scanning for deployed images
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-images]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Generate SBOM (Software Bill of Materials)
  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [build-images]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.spdx.json

  # Rollback job (manual trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rollback'
    environment:
      name: ${{ github.event.inputs.environment }}
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back deployment in ${{ github.event.inputs.environment }}..."
          # Add rollback commands here
          # kubectl rollout undo deployment/pg-neo-graph-rl -n ${{ github.event.inputs.environment }}

      - name: Verify rollback
        run: |
          echo "Verifying rollback..."
          # Add verification commands