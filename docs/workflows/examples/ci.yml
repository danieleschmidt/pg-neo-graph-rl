# GitHub Actions CI Workflow for PG-Neo-Graph-RL
# Place this file in .github/workflows/ci.yml

name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_NO_CACHE_DIR: 0
  PIP_DISABLE_PIP_VERSION_CHECK: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code quality checks
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-

      - name: Run pre-commit
        run: pre-commit run --all-files --show-diff-on-failure

  # Test matrix across Python versions and JAX backends
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
        jax-version: ['cpu']
        include:
          # Add GPU tests only on Ubuntu with Python 3.9
          - os: ubuntu-latest
            python-version: '3.9'
            jax-version: 'gpu'
        exclude:
          # Skip some combinations to reduce CI time
          - os: macos-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.11'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install graphviz

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install graphviz

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,${{ matrix.jax-version }}]"

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --tb=short --cov=pg_neo_graph_rl --cov-branch

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short --timeout=300

      - name: Run benchmarks (smoke test)
        run: |
          pytest tests/benchmarks/ -v --tb=short -m "not slow" --benchmark-only --benchmark-disable-gc

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9' && matrix.jax-version == 'cpu'
        run: |
          coverage xml
          coverage html

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9' && matrix.jax-version == 'cpu'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9' && matrix.jax-version == 'cpu'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  # Security scanning
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run Bandit security linter
        run: |
          bandit -r pg_neo_graph_rl/ -f json -o bandit-report.json
          bandit -r pg_neo_graph_rl/  # Show results in console
        continue-on-error: true

      - name: Run Safety dependency scanner
        run: |
          safety check --json --output safety-report.json
          safety check  # Show results in console
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Documentation building
  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Build documentation
        run: |
          sphinx-build -W -b html docs docs/_build/html
          sphinx-build -W -b doctest docs docs/_build/doctest

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  # Docker builds
  docker:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    strategy:
      matrix:
        target: [development, production, gpu]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: pgneorl/pg-neo-graph-rl
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}-${{ matrix.target }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance regression testing
  performance:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,benchmarks]"

      - name: Run performance benchmarks
        run: |
          pytest tests/benchmarks/ -v --benchmark-only --benchmark-json=benchmark-results.json

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          comment-on-alert: true
          alert-threshold: '150%'
          fail-on-alert: false

  # Dependency analysis
  dependencies:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install pip-audit
        run: pip install pip-audit

      - name: Audit dependencies
        run: pip-audit --desc --format=json --output=audit-report.json
        continue-on-error: true

      - name: Upload audit report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-audit
          path: audit-report.json

  # Notify on success/failure
  notify:
    runs-on: ubuntu-latest
    needs: [quality, test, security, docs, docker]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.quality.result == 'success'
        run: |
          echo "All CI checks passed! üéâ"
          # Add Slack/Discord/email notification here if needed

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.quality.result == 'failure'
        run: |
          echo "CI checks failed! ‚ùå"
          # Add Slack/Discord/email notification here if needed
