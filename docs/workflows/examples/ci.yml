name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  # Cache key version - increment to bust caches
  CACHE_VERSION: v1
  # Python version for most jobs
  DEFAULT_PYTHON: "3.9"

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-lint-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run pre-commit hooks
        run: |
          pre-commit install
          pre-commit run --all-files --show-diff-on-failure

      - name: Type checking with mypy
        run: mypy pg_neo_graph_rl/

  test:
    name: Tests (Python ${{ matrix.python-version }}, JAX ${{ matrix.jax-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        jax-version: ["cpu"]
        include:
          # Test GPU version on one Python version only to save CI time
          - python-version: "3.9"
            jax-version: "gpu"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-${{ matrix.python-version }}-${{ matrix.jax-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,${{ matrix.jax-version }},monitoring,benchmarks]"

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v \
            --cov=pg_neo_graph_rl \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --junit-xml=test-results-unit.xml

      - name: Run integration tests
        run: |
          pytest tests/integration/ -v \
            --junit-xml=test-results-integration.xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == env.DEFAULT_PYTHON && matrix.jax-version == 'cpu'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.jax-version }}
          path: |
            test-results-*.xml
            htmlcov/

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-benchmark-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,benchmarks]"

      - name: Run benchmarks
        run: |
          pytest tests/benchmarks/ -v \
            --benchmark-only \
            --benchmark-json=benchmark-results.json

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: benchmark-results.json

      - name: Performance regression check
        run: |
          # Compare with baseline (implement as needed)
          echo "Benchmark results saved for comparison"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-security-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run Bandit security scan
        run: |
          bandit -r pg_neo_graph_rl/ \
            -f json -o bandit-report.json \
            || true  # Don't fail on security issues

      - name: Run Safety vulnerability scan
        run: |
          safety check \
            --json --output safety-report.json \
            || true  # Don't fail on vulnerabilities

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  docs:
    name: Documentation Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-docs-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints

      - name: Build documentation
        run: |
          cd docs/
          make html

      - name: Check documentation links
        run: |
          cd docs/
          make linkcheck

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          push: false
          tags: pg-neo-graph-rl:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          tags: pg-neo-graph-rl:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker images
        run: |
          docker run --rm pg-neo-graph-rl:dev python -c "import pg_neo_graph_rl; print('Dev image OK')"
          docker run --rm pg-neo-graph-rl:latest python -c "import pg_neo_graph_rl; print('Prod image OK')"

  package:
    name: Package Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-build-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-${{ runner.os }}-pip-

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload package artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # Job to check all required jobs have passed
  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, test, security, docs, docker, package]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          # This job will fail if any required job failed
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "Lint job failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Test job failed"
            exit 1
          fi
          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "Security job failed"
            exit 1
          fi
          if [[ "${{ needs.docs.result }}" != "success" ]]; then
            echo "Documentation job failed"
            exit 1
          fi
          if [[ "${{ needs.docker.result }}" != "success" ]]; then
            echo "Docker job failed"
            exit 1
          fi
          if [[ "${{ needs.package.result }}" != "success" ]]; then
            echo "Package job failed"
            exit 1
          fi
          echo "All required checks passed!"