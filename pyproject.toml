[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "sentiment-analyzer-pro"
dynamic = ["version"]
description = "Enterprise-grade sentiment analysis toolkit with advanced ML models, federated learning, and production deployment"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Daniel Schmidt" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "tokenizers>=0.13.0",
    "numpy>=1.21.0",
    "pandas>=1.5.0",
    "scikit-learn>=1.3.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "pydantic>=2.0.0",
    "aiofiles>=23.0.0",
    "httpx>=0.24.0",
    "rich>=13.0.0",
    "click>=8.1.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
gpu = [
    "torch>=2.0.0+cu118",
]
cpu = [
    "torch>=2.0.0+cpu",
]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",
    "pytest-mock>=3.10",
    "pytest-benchmark>=4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.0",
    "sphinx>=6.0",
    "sphinx-rtd-theme>=1.2",
    "sphinx-autodoc-typehints>=1.24",
    "myst-parser>=2.0.0",
    "nbsphinx>=0.9.0",
    "tox>=4.0.0",
    "coverage[toml]>=7.0.0",
    "codecov>=2.1.0",
]
monitoring = [
    "prometheus-client>=0.16.0",
    "grafana-api>=1.0.3",
]
benchmarks = [
    "pandas>=1.5.0",
    "seaborn>=0.11.0",
    "jupyter>=1.0.0",
    "matplotlib>=3.5.0",
]
interpretability = [
    "shap>=0.42.0",
    "lime>=0.2.0",
    "captum>=0.6.0",
]
streaming = [
    "kafka-python>=2.0.2",
    "redis>=4.5.0",
    "aioredis>=2.0.0",
]
multilingual = [
    "langdetect>=1.0.9",
    "polyglot>=16.7.4",
]

[project.urls]
Homepage = "https://github.com/yourusername/sentiment-analyzer-pro"
Documentation = "https://sentiment-analyzer-pro.readthedocs.io"
Repository = "https://github.com/yourusername/sentiment-analyzer-pro"
Issues = "https://github.com/yourusername/sentiment-analyzer-pro/issues"
Changelog = "https://github.com/yourusername/sentiment-analyzer-pro/blob/main/CHANGELOG.md"
Discussions = "https://github.com/yourusername/sentiment-analyzer-pro/discussions"

[project.scripts]
sentiment-analyzer = "sentiment_analyzer_pro.cli:main"
sap-train = "sentiment_analyzer_pro.training.cli:train"
sap-eval = "sentiment_analyzer_pro.evaluation.cli:evaluate"
sap-api = "sentiment_analyzer_pro.api:start_server"
sap-dashboard = "scripts.monitoring_dashboard:main"

[tool.hatch.version]
source = "vcs"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["pg_neo_graph_rl"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]