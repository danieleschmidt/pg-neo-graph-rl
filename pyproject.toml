[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pg-neo-graph-rl"
dynamic = ["version"]
description = "Federated Graph-Neural Reinforcement Learning toolkit for city-scale traffic, power-grid, or swarm control"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@terragon.ai"},
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@terragon.ai"},
]
keywords = [
    "reinforcement-learning",
    "graph-neural-networks", 
    "federated-learning",
    "multi-agent",
    "jax",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    "jax>=0.4.0",
    "jaxlib>=0.4.0",
    "flax>=0.8.0",
    "optax>=0.2.0",
    "networkx>=3.0",
    "numpy>=1.24.0",
    "gymnasium>=0.29.0",
    "pyyaml>=6.0",
    "tqdm>=4.65.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "pandas>=2.0.0",
    "tensorboard>=2.13.0",
    "wandb>=0.15.0",
    "hydra-core>=1.3.0",
]

[project.optional-dependencies]
gpu = [
    "jax[cuda12_pip]>=0.4.0",
]
cpu = [
    "jax[cpu]>=0.4.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "hypothesis>=6.82.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
monitoring = [
    "prometheus-client>=0.17.0",
    "grafana-api>=1.0.3",
]
ros = [
    "rclpy>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/terragon-labs/pg-neo-graph-rl"
Repository = "https://github.com/terragon-labs/pg-neo-graph-rl"
Documentation = "https://pg-neo-graph-rl.readthedocs.io"
Issues = "https://github.com/terragon-labs/pg-neo-graph-rl/issues"
Changelog = "https://github.com/terragon-labs/pg-neo-graph-rl/blob/main/CHANGELOG.md"

[project.scripts]
pg-neo-train = "pg_neo_graph_rl.cli:train"
pg-neo-eval = "pg_neo_graph_rl.cli:evaluate"
pg-neo-benchmark = "pg_neo_graph_rl.cli:benchmark"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/pg_neo_graph_rl"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pg_neo_graph_rl"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "jax.*",
    "flax.*",
    "optax.*",
    "networkx.*",
    "matplotlib.*",
    "seaborn.*",
    "wandb.*",
    "tensorboard.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.4"
addopts = "-ra -q --strict-markers --cov=pg_neo_graph_rl --cov-report=term-missing --cov-report=xml"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["src/pg_neo_graph_rl"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]