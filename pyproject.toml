[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "pg-neo-graph-rl"
dynamic = ["version"]
description = "Federated Graph-Neural Reinforcement Learning toolkit for city-scale traffic, power-grid, or swarm control"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Daniel Schmidt" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "jax[cpu]>=0.4.0",
    "flax>=0.7.0",
    "optax>=0.1.4",
    "numpy>=1.21.0",
    "networkx>=2.8.0",
    "gymnasium>=0.28.0",
    "matplotlib>=3.5.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
]

[project.optional-dependencies]
gpu = [
    "jax[cuda12_pip]>=0.4.0",
]
cpu = [
    "jax[cpu]>=0.4.0",
]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",
    "pytest-mock>=3.10",
    "pytest-benchmark>=4.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pre-commit>=3.0",
    "sphinx>=6.0",
    "sphinx-rtd-theme>=1.2",
    "sphinx-autodoc-typehints>=1.24",
    "myst-parser>=2.0.0",
    "nbsphinx>=0.9.0",
    "tox>=4.0.0",
    "coverage[toml]>=7.0.0",
    "codecov>=2.1.0",
]
monitoring = [
    "prometheus-client>=0.16.0",
    "grafana-api>=1.0.3",
]
benchmarks = [
    "pandas>=1.5.0",
    "seaborn>=0.11.0",
    "jupyter>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/pg-neo-graph-rl"
Documentation = "https://pg-neo-graph-rl.readthedocs.io"
Repository = "https://github.com/yourusername/pg-neo-graph-rl"
Issues = "https://github.com/yourusername/pg-neo-graph-rl/issues"
Changelog = "https://github.com/yourusername/pg-neo-graph-rl/blob/main/CHANGELOG.md"
Discussions = "https://github.com/yourusername/pg-neo-graph-rl/discussions"

[project.scripts]
pg-neo-rl = "pg_neo_graph_rl.cli:main"
pgnrl-train = "pg_neo_graph_rl.training.cli:train"
pgnrl-eval = "pg_neo_graph_rl.evaluation.cli:evaluate"
pgnrl-dashboard = "scripts.monitoring_dashboard:main"
pgnrl-metrics = "scripts.metrics_collector:main"

[tool.hatch.version]
source = "vcs"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["pg_neo_graph_rl"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]