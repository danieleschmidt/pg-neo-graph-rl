# PG-Neo-Graph-RL Environment Configuration
# Copy this file to .env and update with your actual values

# =============================================================================
# CORE SYSTEM CONFIGURATION
# =============================================================================

# Application Environment
ENVIRONMENT=development  # development, staging, production
DEBUG=true
LOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_FORMAT=text  # text, json

# Random Seeds (for reproducible experiments)
RANDOM_SEED=42
NUMPY_SEED=42
JAX_SEED=42

# =============================================================================
# JAX CONFIGURATION
# =============================================================================

# JAX Platform Selection
JAX_PLATFORM_NAME=gpu  # cpu, gpu, tpu
JAX_ENABLE_X64=true

# GPU Configuration
CUDA_VISIBLE_DEVICES=0,1,2,3  # Comma-separated GPU IDs
XLA_PYTHON_CLIENT_PREALLOCATE=false
XLA_PYTHON_CLIENT_MEM_FRACTION=0.8

# Memory Management
JAX_MEMORY_PREALLOCATION=false
JAX_TRACEBACK_FILTERING=off

# =============================================================================
# FEDERATED LEARNING CONFIGURATION
# =============================================================================

# Communication Settings
COMMUNICATION_BACKEND=grpc  # grpc, redis, nats
COMMUNICATION_TIMEOUT=30  # seconds
MAX_RETRIES=3

# Gossip Protocol
GOSSIP_FANOUT=3  # Number of neighbors to communicate with
GOSSIP_INTERVAL=10  # seconds
GOSSIP_MAX_ROUNDS=100

# Aggregation Settings
AGGREGATION_METHOD=fedavg  # fedavg, fedprox, fedopt
AGGREGATION_FREQUENCY=10  # training steps

# =============================================================================
# PRIVACY CONFIGURATION
# =============================================================================

# Differential Privacy
PRIVACY_ENABLED=true
DIFF_PRIVACY_EPSILON=1.0
DIFF_PRIVACY_DELTA=1e-5
NOISE_MULTIPLIER=1.1
MAX_GRAD_NORM=1.0

# Secure Aggregation
SECURE_AGGREGATION=true
MIN_PARTICIPANTS=5  # Minimum participants for secure aggregation

# =============================================================================
# MONITORING & OBSERVABILITY
# =============================================================================

# Dashboard Configuration
DASHBOARD_HOST=0.0.0.0
DASHBOARD_PORT=8080
DASHBOARD_ENABLED=true

# Metrics Collection
METRICS_ENABLED=true
METRICS_INTERVAL=30  # seconds
METRICS_RETENTION_DAYS=30

# Prometheus Integration
PROMETHEUS_ENABLED=false
PROMETHEUS_HOST=localhost
PROMETHEUS_PORT=9090
PROMETHEUS_PUSHGATEWAY_URL=http://localhost:9091

# Grafana Integration
GRAFANA_ENABLED=false
GRAFANA_HOST=localhost
GRAFANA_PORT=3000
GRAFANA_API_KEY=your-grafana-api-key

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# Metrics Storage
METRICS_STORAGE=file  # file, postgresql, influxdb

# PostgreSQL (if using postgresql storage)
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DATABASE=pg_neo_graph_rl
POSTGRES_USER=postgres
POSTGRES_PASSWORD=your-postgres-password

# InfluxDB (if using influxdb storage)
INFLUXDB_HOST=localhost
INFLUXDB_PORT=8086
INFLUXDB_DATABASE=pg_neo_graph_rl
INFLUXDB_USERNAME=admin
INFLUXDB_PASSWORD=your-influxdb-password
INFLUXDB_TOKEN=your-influxdb-token

# =============================================================================
# NOTIFICATION SERVICES
# =============================================================================

# Email Notifications
EMAIL_ENABLED=false
EMAIL_SMTP_SERVER=smtp.gmail.com
EMAIL_SMTP_PORT=587
EMAIL_USERNAME=reports@example.com
EMAIL_PASSWORD=your-app-password
EMAIL_FROM=PG-Neo-Graph-RL <reports@example.com>
EMAIL_TO=admin@example.com

# Slack Integration
SLACK_ENABLED=false
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
SLACK_CHANNEL=#pg-neo-graph-rl
SLACK_USERNAME=PG-Neo-Bot

# Discord Integration
DISCORD_ENABLED=false
DISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/YOUR/DISCORD/WEBHOOK

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# API Security
API_KEY=your-secure-api-key-here
JWT_SECRET=your-jwt-secret-key
SESSION_SECRET=your-session-secret

# TLS/SSL Configuration
TLS_ENABLED=false
TLS_CERT_PATH=/path/to/cert.pem
TLS_KEY_PATH=/path/to/key.pem

# Authentication
AUTH_ENABLED=false
AUTH_PROVIDER=local  # local, oauth2, ldap

# OAuth2 (if using oauth2 provider)
OAUTH2_CLIENT_ID=your-oauth2-client-id
OAUTH2_CLIENT_SECRET=your-oauth2-client-secret
OAUTH2_REDIRECT_URI=http://localhost:8080/auth/callback

# =============================================================================
# ENVIRONMENT-SPECIFIC SETTINGS
# =============================================================================

# Traffic Environment
TRAFFIC_SIMULATION_TIMESTEP=5  # seconds
TRAFFIC_MAX_VEHICLES=10000
TRAFFIC_RUSH_HOUR_MULTIPLIER=2.5

# Power Grid Environment
POWER_GRID_FREQUENCY=50  # Hz (50 for Europe, 60 for US)
POWER_GRID_VOLTAGE_LEVELS=110,220,400  # kV
POWER_GRID_CONTINGENCY_ENABLED=true

# Swarm Environment
SWARM_COMMUNICATION_RANGE=50.0  # meters
SWARM_MAX_VELOCITY=10.0  # m/s
SWARM_COLLISION_AVOIDANCE=true

# =============================================================================
# DEVELOPMENT & TESTING
# =============================================================================

# Testing Configuration
TEST_TIMEOUT=300  # seconds
TEST_PARALLEL=true
TEST_COVERAGE_THRESHOLD=90  # percentage

# Development Tools
AUTO_RELOAD=true
PROFILING_ENABLED=false
BENCHMARKING_ENABLED=false

# Jupyter Notebook
JUPYTER_ENABLED=false
JUPYTER_PORT=8888
JUPYTER_TOKEN=your-jupyter-token

# =============================================================================
# CLOUD PROVIDER CONFIGURATION
# =============================================================================

# AWS Configuration
AWS_REGION=us-west-2
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_S3_BUCKET=pg-neo-graph-rl-data

# Google Cloud Configuration
GCLOUD_PROJECT_ID=your-gcp-project-id
GCLOUD_REGION=us-central1
GCLOUD_STORAGE_BUCKET=pg-neo-graph-rl-data
GOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account.json

# Azure Configuration
AZURE_SUBSCRIPTION_ID=your-azure-subscription-id
AZURE_RESOURCE_GROUP=pg-neo-graph-rl
AZURE_STORAGE_ACCOUNT=pgneographrl
AZURE_STORAGE_KEY=your-azure-storage-key

# =============================================================================
# CONTAINER CONFIGURATION
# =============================================================================

# Docker Settings
DOCKER_REGISTRY=docker.io
DOCKER_NAMESPACE=pgneorl
DOCKER_TAG=latest

# Kubernetes Settings
KUBE_NAMESPACE=pg-neo-graph-rl
KUBE_CONFIG_PATH=~/.kube/config

# =============================================================================
# EXPERIMENTAL FEATURES
# =============================================================================

# Feature Flags
ENABLE_QUANTUM_ALGORITHMS=false
ENABLE_NEUROMORPHIC_COMPUTING=false
ENABLE_BLOCKCHAIN_CONSENSUS=false
ENABLE_ADVANCED_VISUALIZATION=true

# Research Features
ENABLE_META_LEARNING=false
ENABLE_CONTINUAL_LEARNING=false
ENABLE_MULTI_OBJECTIVE_RL=false

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================

# Threading
NUM_THREADS=8
OMP_NUM_THREADS=8
MKL_NUM_THREADS=8

# Memory Management
MAX_MEMORY_USAGE=16GB
GARBAGE_COLLECTION_THRESHOLD=1000

# Batch Processing
BATCH_SIZE=256
MINI_BATCH_SIZE=32
MAX_SEQUENCE_LENGTH=1000

# =============================================================================
# DEBUGGING & DEVELOPMENT
# =============================================================================

# Debug Settings
DEBUG_MODE=false
VERBOSE_LOGGING=false
PROFILE_MEMORY=false
PROFILE_COMPUTE=false

# Development Server
DEV_SERVER_HOST=localhost
DEV_SERVER_PORT=8000
DEV_SERVER_RELOAD=true

# =============================================================================
# NOTES
# =============================================================================

# 1. Always use strong passwords and secure API keys in production
# 2. Set DEBUG=false and LOG_LEVEL=WARNING in production
# 3. Enable TLS/SSL for production deployments
# 4. Regularly rotate API keys and secrets
# 5. Use environment-specific configuration files
# 6. Never commit .env files with real credentials to version control
# 7. Use secrets management systems (HashiCorp Vault, AWS Secrets Manager)
# 8. Monitor resource usage and adjust limits accordingly
# 9. Enable monitoring and alerting for production systems
# 10. Follow the principle of least privilege for all access controls
