name: Production Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: us-west-2

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: Run security scan
      run: |
        pip install bandit safety
        bandit -r pg_neo_graph_rl/
        safety check
        
    - name: Run linting
      run: |
        pip install ruff black mypy
        ruff check pg_neo_graph_rl/
        black --check pg_neo_graph_rl/
        mypy pg_neo_graph_rl/

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: deployment/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
        
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.27.0'
        
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'
        
    - name: Deploy infrastructure
      run: |
        cd deployment/terraform
        terraform init
        terraform plan -var="image_tag=${{ github.sha }}"
        terraform apply -var="image_tag=${{ github.sha }}" -auto-approve
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name pg-neo-graph-rl-production
        
    - name: Deploy to Kubernetes
      run: |
        # Update image in deployment
        sed -i 's|image: pg-neo-graph-rl:latest|image: ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}|g' deployment/kubernetes/application.yaml
        
        kubectl apply -f deployment/kubernetes/
        kubectl rollout status deployment/federated-graph-rl -n pg-neo-graph-rl --timeout=600s
        
    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=federated-graph-rl -n pg-neo-graph-rl --timeout=300s
        
        # Test health endpoint
        SERVICE_IP=$(kubectl get svc federated-graph-rl-service -n pg-neo-graph-rl -o jsonpath='{.spec.clusterIP}')
        kubectl run smoke-test --image=curlimages/curl --rm -it --restart=Never -- curl -f http://$SERVICE_IP/health
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "ðŸŽ‰ Deployment to production completed successfully!"
        echo "Image: ${{ needs.build.outputs.image }}@${{ needs.build.outputs.digest }}"
